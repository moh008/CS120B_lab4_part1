
moh008_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000941  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000822  00000000  00000000  00000b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002eb  00000000  00000000  000013bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  00001b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	39 d0       	rcall	.+114    	; 0x11c <main>
  aa:	48 c0       	rjmp	.+144    	; 0x13c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <B_SM_Tick>:
}


void B_SM_Tick()
{
	switch (state)
  ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	79 f0       	breq	.+30     	; 0xd4 <B_SM_Tick+0x26>
  b6:	28 f0       	brcs	.+10     	; 0xc2 <B_SM_Tick+0x14>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	a1 f0       	breq	.+40     	; 0xe4 <B_SM_Tick+0x36>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	b1 f0       	breq	.+44     	; 0xec <B_SM_Tick+0x3e>
  c0:	1d c0       	rjmp	.+58     	; 0xfc <B_SM_Tick+0x4e>
	{
		case start:
			tmpB = SetBit(tmpB, 0, 1);
  c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpB>
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
			state = wait;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
  d2:	08 95       	ret
			
		case wait:
			if(GetBit(A, 0))
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d8:	80 ff       	sbrs	r24, 0
  da:	1f c0       	rjmp	.+62     	; 0x11a <B_SM_Tick+0x6c>
				state = pressed;
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  e2:	0e c0       	rjmp	.+28     	; 0x100 <B_SM_Tick+0x52>
			else
				state = wait;
			break;
		
		case pressed:
			state = stay;
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
  ea:	08 95       	ret
		
		case stay:
			if(!GetBit(A, 0))
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	80 fd       	sbrc	r24, 0
  f2:	13 c0       	rjmp	.+38     	; 0x11a <B_SM_Tick+0x6c>
				state = wait;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  fa:	08 95       	ret
			break;
		
		default:
		break;
	}
	switch (state)
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	69 f4       	brne	.+26     	; 0x11a <B_SM_Tick+0x6c>
		
		case wait:
		break;
		
		case pressed:
		if(GetBit(tmpB, 0) == 1)
 100:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpB>
 104:	80 ff       	sbrs	r24, 0
 106:	05 c0       	rjmp	.+10     	; 0x112 <B_SM_Tick+0x64>
		{
			tmpB = SetBit(tmpB, 1, 1);
			tmpB = SetBit(tmpB, 0, 0);
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
 110:	08 95       	ret
		}
		else
		{
			tmpB = SetBit(tmpB, 1, 0);
			tmpB = SetBit(tmpB, 0, 1);
 112:	8d 7f       	andi	r24, 0xFD	; 253
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
 11a:	08 95       	ret

0000011c <main>:
	}
}

int main()
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as input
 11c:	11 b8       	out	0x01, r1	; 1
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs
 122:	84 b9       	out	0x04, r24	; 4
 124:	15 b8       	out	0x05, r1	; 5
	state = start;
 126:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>

	while(1)
	{	A = PINA & 0x01;
 12a:	80 b1       	in	r24, 0x00	; 0
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		B_SM_Tick();
 132:	bd df       	rcall	.-134    	; 0xae <B_SM_Tick>
		// 3) write results to port
		PORTB = tmpB;
 134:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpB>
 138:	85 b9       	out	0x05, r24	; 5
 13a:	f7 cf       	rjmp	.-18     	; 0x12a <main+0xe>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
